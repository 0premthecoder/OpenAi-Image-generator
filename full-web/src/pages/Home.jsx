import React, { useState, useEffect} from 'react'
// Home Page
import { Loader, Card, FormField } from "../components" // Components

const RenderCard = ({data, title})=>{
  if (data?.length > 0){ // In JavaScript, data?.length is an example of optional chaining. The ?. operator is used to access the length property of the data object only if the data object exists. If the data object is null or undefined, the expression returns undefined instead of throwing an error.
    // console.log(data?.length)
    return data.map((post) =><Card key={post._id} {...post}/> // ..post means all the para of post
    )
  }
  else{
    return <h2 className='mt-5 font-bold text-[#6449ff] text-xl uppercase'>{title}</h2>

  }
  
}
const Home = () => {
  const [loading, setLoading] = useState(false)// for Controlling loading bar
  const [allPosts, setAllPosts] = useState(null) // variable for all posts
  const [searchText, setSearchText] = useState(null)// searching var
  const [searchResults, setSearchResults] = useState(null)
  const [searchTimeout, setSearchTimeout] = useState(null)
  useEffect(() => {
    const fetchPost = async ()=>{
      setLoading(true)
      try {
        const response = await fetch('http://localhost:8080/api/v1/posts', {
          method:"GET",
          headers:{
            'content-type':'application/json'
          }
        })

        if(response.ok){
          const result = await response.json()
          setAllPosts(result.data.reverse())
        }
      } catch (error) {
        alert(error)
      } finally{
        setLoading(false)
      }
    }
    fetchPost()
  }, [])
  
  const handleSearchSubmit =(e)=>{
    setSearchText(e.target.value)
    clearTimeout(searchTimeout)
    setSearchTimeout(
    setTimeout(() => {
      const searchResults = allPosts.filter((item)=>item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()))
      setSearchResults(searchResults)
    }, 500))
  }

  return (
    // home page starts
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1> 
        {/* heading which is extrabold and having font size 32px and color somehow black */}
        <p className='mt-2 text-[#666e75] text-[16px] max-w-[500px]'>Browse through a collection of imaginative and visually stunning images generated by Dall-E AI</p>
        {/* having margin top 2 and maximum width 500px */}
      </div>

      <div className='mt-16'>
        <FormField
        labelName={"Search Posts"}
        name={"search"}
        placeholder={"Search Posts.."}
        value={searchText}
        handleChange={handleSearchSubmit}
         />
      </div>

      <div className='mt-10'>
        {loading ?(
            <div className="flex justify-center items-center">
              <Loader/>
            </div>
          ): (
            <>
              {searchText && (<h2 className=' font-medium text-[#666e75] text-xl mb-3'>
                Search result for <span className="text-[#222328">{searchText}</span>
              </h2>)}
              {/* xl means xtra large */}
              <div className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3'>
                {searchText ? (<RenderCard 
                data={searchResults} 
                title={"No Seacrh Results Found"}
                />): (<RenderCard
                data={allPosts}
                title={"No Posts Found"}
                />)}
                
              </div>
              {/* a grid for images grid-cols-num means column xs means xtra small sm-small gap is for gap */}
            </>
          )}
      </div>
    </section>
  )
}
// 28:30
export default Home

